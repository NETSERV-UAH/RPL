#! /usr/bin/python
# -*- coding: utf-8 -*-

import os 
import operator
from collections import OrderedDict

def hopscount_parser(dir):
    #Dir, files vars
    result_dir = 'ParsedLogs'
    path = os.getcwd()+'/'+dir
    files = os.listdir(path)
    
    #Create a final dir(already create it)
    os.mkdir(path+'/'+result_dir+'/')


    for file in files:
        if(file != result_dir):
            try:
                
                file_to_parse = open(path+'/'+file, 'r')
                print('\n\nReading the file '+file)
            except:
                print('Error, cannot read the file: '+file)

            try:
                file_parsed = open(path+'/'+result_dir+'/parsed_'+file,'w')
                print('Creating the file parsed_'+file)
            except:
                print('Error, cannot create the file: parsed_'+file)

            try:
                num_motes=motes_count_per_file(file_to_parse)
            except:
                print('Error, cannot read the number of motes in the file: '+ file)

            try:
                dic_motes = {0:{'Nothing':'here'}}
                for i in range(1,num_motes+1):
                    dic_motes[i]  = {}
                    for j in range(1,(num_motes+1)):
                        if(j != i):
                            dic_motes[i].update({str(j):'-'})
                print('Creating data struct for all hops in the file: '+file)
                #debug
                """
                for a,b in dic_motes.items():
                    print '\nMota:',a
                    for key in b:
                        print key+':',b[key] """

            except:
                print('Error, cannot create data struct in the file: '+ file)

            try:
                hops_count_per_file(file_to_parse,dic_motes)
                
            except:
                print('Error, cannot read the hops per mote in the file: '+ file)

            try:
                write_parsed_data(file_parsed,dic_motes,file,num_motes)
                
            except:
                print('Error, cannot write in the file: '+ file)

            file_parsed.close()
            file_to_parse.close()

    

def motes_count_per_file(file):
    motes_count = 0

    for line in file:
        if(line.count('Node ID: ')):
            motes_count+=1

    file.seek(0)  

    return motes_count

def hops_count_per_file(file_to_parse,dic_motes):
    mote_a = 0
    mote_b = 0
    hops_a_to_b = 0

    for line in file_to_parse:
        if(line.count('M[')):
            data = line.split('M[') #Data[1] and data[2] 

            mote_a = int(data[1][0:len(data[1])-2])
            aux_data_split = data[2].split(':')
            
            mote_b = int(aux_data_split[0][0:len(aux_data_split[0])-1])
            hops_a_to_b = int(aux_data_split[1][0:len(aux_data_split[1])-1])
            
            dic_motes[mote_a][str(mote_b)]= str(hops_a_to_b)
            dic_motes[mote_b][str(mote_a)]= str(hops_a_to_b)

    file_to_parse.seek(0)

def write_parsed_data(file_parsed,dic_motes,file,num_motes):
    file_parsed.write('File generated by hopscount_parser.py \n')
    file_parsed.write('Original file name: '+ file + '\n')
    file_parsed.write('Number of motes: '+str(num_motes) +'\n')
    avg=0.0
    aux_avg=0.0
    num_motes_aux=0

    dic_avg_per_mote = {'0':'-'}
    for i in range(1,num_motes+1):
        dic_avg_per_mote.update({str(i):'0'})

    

    for i in range(1,num_motes+1):
        file_parsed.write('\n\nMote['+str(i)+'] | Dest_Mote_ID | Hops\n')
        
        for key in sorted(dic_motes[i]):
            file_parsed.write('\t\t| \t\t\t'+str(key)+' | \t'+ str(dic_motes[i][key])+'\n')
            if(str(dic_motes[i][key]) != '-'):
                avg += float(dic_motes[i][key])
                num_motes_aux+=1
        
        avg /= float(num_motes_aux)
        file_parsed.write('Hops Avg to all motes: '+ str(avg) +'\n')
        dic_avg_per_mote[str(i)] = str(avg)
        avg=0.0
        num_motes_aux=0
    
    for i in range(1,num_motes+1):
        aux_avg+=float(dic_avg_per_mote[str(i)])

    aux_avg /=  float(num_motes)
    file_parsed.write('\n|Total Hops avg all with all: '+str(aux_avg) +'\n') 
    
if __name__ == '__main__':
    dir_logs = raw_input('Name of logs dir: ')
    if(dir_logs == ''):
        dir_logs= 'logs'
    
    hopscount_parser(dir_logs)

    print('\nDone it!')
